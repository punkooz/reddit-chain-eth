{"version":3,"sources":["components/Navbar.js","components/Main.js","components/App.js","serviceWorker.js","index.js"],"names":["Navbar","Component","render","className","href","target","rel","id","this","props","account","width","height","src","Identicon","toString","Main","role","style","maxWidth","onSubmit","event","preventDefault","content","postContent","value","createPost","type","ref","input","placeholder","required","posts","map","post","key","author","window","web3","utils","fromWei","tipAmount","name","onClick","toWei","console","log","tipPost","App","componentWillMount","loadWeb3","loadBlockchainData","ethereum","Web3","setState","metaEth","currentProvider","metaWeb3","eth","getAccounts","accounts","net","getId","networkId","networkData","SocialNetwork","networks","socialNetwork","Contract","abi","address","methods","postCount","call","i","state","sort","a","b","loading","alert","require","config","providers","WebsocketProvider","process","enable","send","from","once","receipt","constructor","super","bind","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2df01678.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Identicon from 'identicon.js';\r\n\r\nclass Navbar extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\r\n        <a\r\n          className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\r\n          href=\"http://www.dappuniversity.com/bootcamp\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          REDDIT CHAIN MVP\r\n        </a>\r\n        <ul className=\"navbar-nav px-3\">\r\n          <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\r\n            <small className=\"text-secondary\">\r\n              <small id=\"account\">{this.props.account}</small>\r\n            </small>\r\n            { this.props.account\r\n              ? <img\r\n                className='ml-2'\r\n                width='30'\r\n                height='30'\r\n                src={`data:image/png;base64,${new Identicon(this.props.account, 30).toString()}`}\r\n              />\r\n              : <span></span>\r\n            }\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from 'react';\r\nimport Identicon from 'identicon.js';\r\n\r\nclass Main extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container-fluid mt-5\">\r\n        <div className=\"row\">\r\n          <main role=\"main\" className=\"col-lg-12 ml-auto mr-auto\" style={{ maxWidth: '500px' }}>\r\n            <div className=\"content mr-auto ml-auto\">\r\n              <p>&nbsp;</p>\r\n                <form onSubmit={(event) => {\r\n                  event.preventDefault()\r\n                  const content = this.postContent.value\r\n                  this.props.createPost(content)\r\n                }}>\r\n                <div className=\"form-group mr-sm-2\">\r\n                  <input\r\n                    id=\"postContent\"\r\n                    type=\"text\"\r\n                    ref={(input) => { this.postContent = input }}\r\n                    className=\"form-control\"\r\n                    placeholder=\"What's on your mind?\"\r\n                    required />\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-primary btn-block\">Share</button>\r\n              </form>\r\n              <p>&nbsp;</p>\r\n              { this.props.posts.map((post, key) => {\r\n                return(\r\n                  <div className=\"card mb-4\" key={key} >\r\n                    <div className=\"card-header\">\r\n                      <img\r\n                        className='mr-2'\r\n                        width='30'\r\n                        height='30'\r\n                        src={`data:image/png;base64,${new Identicon(post.author, 30).toString()}`}\r\n                      />\r\n                      <small className=\"text-muted\">{post.author}</small>\r\n                    </div>\r\n                    <ul id=\"postList\" className=\"list-group list-group-flush\">\r\n                      <li className=\"list-group-item\">\r\n                        <p>{post.content}</p>\r\n                      </li>\r\n                      <li key={key} className=\"list-group-item py-2\">\r\n                        <small className=\"float-left mt-1 text-muted\">\r\n                          TIPS: {window.web3.utils.fromWei(post.tipAmount.toString(), 'Ether')} ETH\r\n                        </small>\r\n                        <button\r\n                          className=\"btn btn-link btn-sm float-right pt-0\"\r\n                          name={post.id}\r\n                          onClick={(event) => {\r\n                            let tipAmount = window.web3.utils.toWei('0.1', 'Ether')\r\n                            console.log(event.target.name, tipAmount)\r\n                            this.props.tipPost(event.target.name, tipAmount)\r\n                          }}\r\n                        >\r\n                          TIP 0.1 ETH\r\n                        </button>\r\n                      </li>\r\n                    </ul>\r\n                  </div>\r\n                )\r\n              })}\r\n            </div>\r\n          </main>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React, { Component } from 'react';\r\nimport Web3 from 'web3';\r\nimport Identicon from 'identicon.js';\r\nimport './App.css';\r\nimport SocialNetwork from '../abis/SocialNetwork.json'\r\nimport Navbar from './Navbar'\r\nimport Main from './Main'\r\n\r\nclass App extends Component {\r\n\r\n  async componentWillMount() {\r\n    await this.loadWeb3()\r\n    await this.loadBlockchainData()\r\n  }\r\n\r\n  async loadWeb3() {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum)\r\n      this.setState({ metaEth: true })\r\n      // await window.ethereum.enable()\r\n    }\r\n    else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n      this.setState({ metaWeb3: true })\r\n    }\r\n    \r\n  }\r\n\r\n  async loadBlockchainData() {\r\n    if(window.web3)\r\n        {\r\n          const web3 = window.web3\r\n          // Load account\r\n          const accounts = await web3.eth.getAccounts()\r\n          this.setState({ account: accounts[0] })\r\n          // Network ID\r\n          const networkId = await web3.eth.net.getId()\r\n          const networkData = SocialNetwork.networks[networkId]\r\n          if(networkData) {\r\n            const socialNetwork = web3.eth.Contract(SocialNetwork.abi, networkData.address)\r\n            this.setState({ socialNetwork })\r\n            const postCount = await socialNetwork.methods.postCount().call()\r\n            this.setState({ postCount })\r\n            // Load Posts\r\n            for (var i = 1; i <= postCount; i++) {\r\n              const post = await socialNetwork.methods.posts(i).call()\r\n              this.setState({\r\n                posts: [...this.state.posts, post]\r\n              })\r\n            }\r\n            // Sort posts. Show highest tipped posts first\r\n            this.setState({\r\n              posts: this.state.posts.sort((a,b) => b.tipAmount - a.tipAmount )\r\n            })\r\n            this.setState({ loading: false})\r\n          } else {\r\n            window.alert('SocialNetwork contract not deployed to detected network.')\r\n          }\r\n        }\r\n\r\n    else{\r\n      require('dotenv').config()\r\n\r\n      // Default Account\r\n      this.setState({ account: \"Sample Address: 0x323n....\" })\r\n\r\n      \r\n      //Fallback to Infura, Metamask not available\r\n      const web3 = new Web3(\r\n        // Replace YOUR-PROJECT-ID with a Project ID from your Infura Dashboard\r\n        new Web3.providers.WebsocketProvider(`wss://rinkeby.infura.io/ws/v3/${process.env.REACT_APP_INFURA_API_KEY}`)\r\n      );\r\n\r\n      window.web3 = web3\r\n\r\n      \r\n\r\n      // Network ID\r\n      const networkId = await web3.eth.net.getId()\r\n      const networkData = SocialNetwork.networks[networkId]\r\n\r\n      if(networkData) {\r\n        //Load Contract\r\n        const socialNetwork = web3.eth.Contract(SocialNetwork.abi, networkData.address)\r\n        this.setState({ socialNetwork })\r\n        const postCount = await socialNetwork.methods.postCount().call()\r\n        this.setState({ postCount })\r\n        // Load Posts\r\n        for (var i = 1; i <= postCount; i++) {\r\n          const post = await socialNetwork.methods.posts(i).call()\r\n          this.setState({\r\n            posts: [...this.state.posts, post]\r\n          })\r\n        }\r\n        // Sort posts. Show highest tipped posts first\r\n        this.setState({\r\n          posts: this.state.posts.sort((a,b) => b.tipAmount - a.tipAmount )\r\n        })\r\n        this.setState({ loading: false})\r\n      }\r\n      else {\r\n        window.alert('SocialNetwork contract not deployed to detected network.')\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  async createPost(content) {\r\n\r\n    if(this.state.metaEth) {\r\n      //Connect Metamask\r\n      await window.ethereum.enable()\r\n\r\n      const web3 = window.web3\r\n\r\n      const accounts = await web3.eth.getAccounts()\r\n      this.setState({ account: accounts[0] })\r\n\r\n      //Load post Data\r\n      this.setState({ loading: true })\r\n      this.state.socialNetwork.methods.createPost(content).send({ from: this.state.account })\r\n      .once('receipt', (receipt) => {\r\n        this.setState({ loading: false })\r\n      })\r\n    } else if(this.state.metaWeb3){\r\n\r\n      const web3 = window.web3\r\n\r\n      const accounts = await web3.eth.getAccounts()\r\n      this.setState({ account: accounts[0] })\r\n\r\n      this.setState({ loading: true })\r\n      this.state.socialNetwork.methods.createPost(content).send({ from: this.state.account })\r\n      .once('receipt', (receipt) => {\r\n        this.setState({ loading: false })\r\n      })\r\n    } else {\r\n      window.alert('Consider trying MetaMask!')\r\n    }\r\n\r\n    \r\n  }\r\n\r\n  async tipPost(id, tipAmount) {\r\n\r\n\r\n    if(this.state.metaEth) {\r\n      //Connect Metamask\r\n      await window.ethereum.enable()\r\n\r\n      const web3 = window.web3\r\n\r\n      const accounts = await web3.eth.getAccounts()\r\n      this.setState({ account: accounts[0] })\r\n\r\n      //Load post Data\r\n      this.setState({ loading: true })\r\n      this.state.socialNetwork.methods.tipPost(id).send({ from: this.state.account, value: tipAmount })\r\n      .once('receipt', (receipt) => {\r\n        this.setState({ loading: false })\r\n      })\r\n    } else if(this.state.metaWeb3){\r\n\r\n      const web3 = window.web3\r\n\r\n      const accounts = await web3.eth.getAccounts()\r\n      this.setState({ account: accounts[0] })\r\n\r\n      this.setState({ loading: true })\r\n      this.state.socialNetwork.methods.tipPost(id).send({ from: this.state.account, value: tipAmount })\r\n      .once('receipt', (receipt) => {\r\n        this.setState({ loading: false })\r\n      })\r\n    } else {\r\n      window.alert('Consider trying MetaMask!')\r\n    }\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      account: '',\r\n      socialNetwork: null,\r\n      postCount: 0,\r\n      posts: [],\r\n      loading: true,\r\n      metaEth: false,\r\n      metaWeb3: false\r\n    }\r\n\r\n    this.createPost = this.createPost.bind(this)\r\n    this.tipPost = this.tipPost.bind(this)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar account={this.state.account} />\r\n        { this.state.loading\r\n          ? <div id=\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>\r\n          : <Main\r\n              posts={this.state.posts}\r\n              createPost={this.createPost}\r\n              tipPost={this.tipPost}\r\n            />\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}